{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useMemo } from \"react\";\nexport default function IsOnScreen(ref) {\n  _s();\n\n  const [isIntersecting, setIntersecting] = useState(false);\n  const observer = new IntersectionObserver(([entry]) => setIntersecting(entry.isIntersecting));\n  const memoObserver = useMemo(observer);\n  useEffect(() => {\n    memoObserver.observe(ref.current); // Remove the observer as soon as the component is unmounted\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [memoObserver, ref]);\n  return isIntersecting;\n}\n\n_s(IsOnScreen, \"SYNxjTvWcM13XWlx5ApQPmA67fY=\");\n\n_c = IsOnScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"IsOnScreen\");","map":{"version":3,"sources":["/Users/gagecates/coding/Portfolio/react-portfolio/portfolio/src/hooks/IsOnScreen.js"],"names":["useState","useEffect","useMemo","IsOnScreen","ref","isIntersecting","setIntersecting","observer","IntersectionObserver","entry","memoObserver","observe","current","disconnect"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,OAA9B,QAA6C,OAA7C;AAEA,eAAe,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AAAA;;AAEtC,QAAM,CAACC,cAAD,EAAiBC,eAAjB,IAAoCN,QAAQ,CAAC,KAAD,CAAlD;AAEA,QAAMO,QAAQ,GAAG,IAAIC,oBAAJ,CACf,CAAC,CAACC,KAAD,CAAD,KAAaH,eAAe,CAACG,KAAK,CAACJ,cAAP,CADb,CAAjB;AAGA,QAAMK,YAAY,GAAGR,OAAO,CAACK,QAAD,CAA5B;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,YAAY,CAACC,OAAb,CAAqBP,GAAG,CAACQ,OAAzB,EADc,CAEd;;AACA,WAAO,MAAM;AAAEL,MAAAA,QAAQ,CAACM,UAAT;AAAuB,KAAtC;AACD,GAJQ,EAIN,CAACH,YAAD,EAAeN,GAAf,CAJM,CAAT;AAMA,SAAOC,cAAP;AACD;;GAhBuBF,U;;KAAAA,U","sourcesContent":["import { useState, useEffect, useMemo } from \"react\"\n\nexport default function IsOnScreen(ref) {\n\n  const [isIntersecting, setIntersecting] = useState(false)\n\n  const observer = new IntersectionObserver(\n    ([entry]) => setIntersecting(entry.isIntersecting)\n  )\n  const memoObserver = useMemo(observer)\n\n  useEffect(() => {\n    memoObserver.observe(ref.current)\n    // Remove the observer as soon as the component is unmounted\n    return () => { observer.disconnect() }\n  }, [memoObserver, ref])\n\n  return isIntersecting\n}"]},"metadata":{},"sourceType":"module"}